        var percentColors = [
        { pct: 0.0, color: { r: 0x00, g: 0x00, b: 0xff } },
        { pct: 0.5, color: { r: 0xaa, g: 0xaa, b: 0xaa } },
        { pct: 1.0, color: { r: 0xff, g: 0, b: 0x00 } } ];

        var getColorForPercentage = function(pct) {
            for (var i = 1; i < percentColors.length - 1; i++) {
                if (pct < percentColors[i].pct) {
                    break;
                }
            }
            var lower = percentColors[i - 1];
            var upper = percentColors[i];
            var range = upper.pct - lower.pct;
            var rangePct = (pct - lower.pct) / range;
            var pctLower = 1 - rangePct;
            var pctUpper = rangePct;
            var color = {
                r: Math.floor(lower.color.r * pctLower + upper.color.r * pctUpper),
                g: Math.floor(lower.color.g * pctLower + upper.color.g * pctUpper),
                b: Math.floor(lower.color.b * pctLower + upper.color.b * pctUpper)
            };
            return 'rgb(' + [color.r, color.g, color.b].join(',') + ')';
    // or output as hex if preferred
}  


var colordict = {'0': 'rgba(31,119,180,1.0)',
'1': 'rgba(174,199,232,1.0)',
'2': 'rgba(255,127,14,1.0)',
'3': 'rgba(255,187,120,1.0)',
'4': 'rgba(44,160,44,1.0)',
'5': 'rgba(152,223,138,1.0)',
'6': 'rgba(214,39,40,1.0)',
'7': 'rgba(255,152,150,1.0)',
'8': 'rgba(148,103,189,1.0)',
'9': 'rgba(197,176,213,1.0)',
'10': 'rgba(140,86,75,1.0)',
'11': 'rgba(196,156,148,1.0)',
'12': 'rgba(227,119,194,1.0)',
'13': 'rgba(247,182,210,1.0)',
'14': 'rgba(127,127,127,1.0)',
'15': 'rgba(199,199,199,1.0)',
'16': 'rgba(188,189,34,1.0)',
'17': 'rgba(219,219,141,1.0)'}

var ncplancolors = [];
var plancolor = []
function colorplan(feature) {


            plancolor.push(parseInt(feature.properties["EL14G_USS_"])/(parseInt(feature.properties["EL14G_US_1"]) + parseInt(feature.properties["EL14G_USS_"])));
            return {
                //pane: 'pane_PA_VTD_PLANS_0',
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.75, 
                fill: true,
                fillOpacity: 1,
                fillColor: getColorForPercentage(parseInt(feature.properties["EL14G_USS_"])/(parseInt(feature.properties["EL14G_US_1"]) + parseInt(feature.properties["EL14G_USS_"]))),
                //colordict[String(feature.properties["assn"])],
            };
        }


        const makemap = (bindto,varname) =>  {
            plancolor = [];
            var map = new L.map(bindto, {
                maxZoom:10, minZoom:4, attributionControl: false,
            }).fitBounds([[31.7,-85],[37,-74]]);

            var layer =  L.geoJson(varname, {
                style: colorplan,
            }).addTo(map);

            
            
            ncplancolors.push(plancolor.slice(0).sort())
            return layer;
        }

        [['ncmap0',vtds_0],['ncmap1',vtds_1],['ncmap2',vtds_2],['ncmap3',vtds_3],['ncmap4',vtds_4],['ncmap5',vtds_5],['ncmap6',vtds_6],['ncmap7',vtds_7],['ncmap8',vtds_8],['ncmap9',vtds_9],['ncmap10',vtds_10],['ncmap11',vtds_11],['ncmap12',vtds_12]].forEach(x => makemap(x[0],x[1]))


const sv_0 =  [[1, 0.3426502239684188], [2, 0.43012512410399717], [3, 0.4531481666770889], [4, 0.4745173857438778], [5, 0.47813302980248207], [6, 0.4916277462532187], [7, 0.4995290789301421], [8, 0.5080672991980703], [9, 0.5207673988273555], [10, 0.5254837708795325], [11, 0.5468703549550156], [12, 0.5695414720843646], [13, 0.6566037990806628]]
const scores_0 = [0.322, 1.0];


const sv_1 =  [[1, 0.36544007969419967], [2, 0.37543783725842705], [3, 0.4526160786977522], [4, 0.4571323019597665], [5, 0.4736796205015589], [6, 0.4841370060095236], [7, 0.49930781633928567], [8, 0.5151219440979595], [9, 0.5268715181858544], [10, 0.5427824633510163], [11, 0.5473154202103736], [12, 0.6247638894772176], [13, 0.6337581291573058]]
const scores_1 = [0.384, 1.0];


const sv_2 =  [[1, 0.3561665421902682], [2, 0.3634547234056863], [3, 0.43657289812122013], [4, 0.4599412993414037], [5, 0.47522106637140105], [6, 0.48463830288722065], [7, 0.49979345001451714], [8, 0.5157897260471245], [9, 0.5198509176374881], [10, 0.5400447871277083], [11, 0.563398208059753], [12, 0.6276458956684594], [13, 0.6446527518868419]]
const scores_2 = [0.391, 0.998];


const sv_3 =  [[1, 0.35588740144129893], [2, 0.4158827824049477], [3, 0.441115979280872], [4, 0.44977048826005395], [5, 0.47399919679166125], [6, 0.4788918997334085], [7, 0.498257627125684], [8, 0.5204556412267463], [9, 0.5262424558695715], [10, 0.5529017523139468], [11, 0.5570298656227197], [12, 0.5832564853735624], [13, 0.635358036443668]]
const scores_3 = [0.397, 0.997];


const sv_4 =  [[1, 0.3397643535823105], [2, 0.3765487616006533], [3, 0.38542552254635565], [4, 0.4437450193272602], [5, 0.46806799389063547], [6, 0.4716797054845059], [7, 0.4936153945438404], [8, 0.5281275066859318], [9, 0.5291795103121879], [10, 0.5562027780634385], [11, 0.6066689483083978], [12, 0.622880531562984], [13, 0.660396026431918]]
const scores_4 = [0.4, 0.997];


const sv_5 =  [[1, 0.3588990919440702], [2, 0.40774547440718845], [3, 0.4453531531750786], [4, 0.44840607369549657], [5, 0.47337990184462153], [6, 0.4816021159475713], [7, 0.4990977274041145], [8, 0.5130196693423796], [9, 0.5274924750035035], [10, 0.5519142484451345], [11, 0.5555566613934362], [12, 0.5899947111831224], [13, 0.6304205787729753]]
const scores_5 = [0.402, 0.997];


const sv_6 =  [[1, 0.35197965879905724], [2, 0.3662884336663843], [3, 0.4432807251997518], [4, 0.451466764947423], [5, 0.458443090295394], [6, 0.4723229251809171], [7, 0.48249286016629156], [8, 0.5274749920921535], [9, 0.545404230139239], [10, 0.5489198937352214], [11, 0.5570890529284718], [12, 0.6244114160403388], [13, 0.6490867378377582]]
const scores_6 = [0.409, 0.995];


const sv_7 =  [[1, 0.3584229522095883], [2, 0.3888952218886699], [3, 0.4464624674188903], [4, 0.46770122509182754], [5, 0.47049022227589843], [6, 0.47313596427200755], [7, 0.49515104475786165], [8, 0.49598345438656644], [9, 0.529493044955079], [10, 0.5310890925561914], [11, 0.5539766899909224], [12, 0.6115064924803867], [13, 0.6415656892066806]]
const scores_7 = [0.41, 0.994];


const sv_8 =  [[1, 0.3619855186876877], [2, 0.37431043486467086], [3, 0.42409137937808006], [4, 0.4600890718664019], [5, 0.47399919679166125], [6, 0.47906446331592845], [7, 0.4998135521828585], [8, 0.5178178235714042], [9, 0.5251543687657338], [10, 0.5397597420451232], [11, 0.5763774272659035], [12, 0.6028746210837435], [13, 0.6276038184747226]]
const scores_8 = [0.414, 0.994];


const sv_9 =  [[1, 0.36779197806095987], [2, 0.3828855690557055], [3, 0.4378986383371908], [4, 0.4486126818397719], [5, 0.47049022227589843], [6, 0.4798621027905018], [7, 0.49839891507106493], [8, 0.5170187983668683], [9, 0.5203544866397147], [10, 0.5381101581284953], [11, 0.5502651200935817], [12, 0.6151452903835002], [13, 0.6319289827590893]]
const scores_9 = [0.428, 0.994];


const sv_10 =  [[1, 0.37503754799749445], [2, 0.38434963841695113], [3, 0.42770292369454177], [4, 0.4488422728801462], [5, 0.46894088890793806], [6, 0.47744953014553226], [7, 0.4887691269220308], [8, 0.5118371334526071], [9, 0.5301884837438882], [10, 0.5352274693679393], [11, 0.568262211435335], [12, 0.6159513263524905], [13, 0.6251423608731572]]
const scores_10 = [0.431, 0.993];


const sv_11 =  [[1, 0.36206289421121374], [2, 0.40119762731116904], [3, 0.42750048145935704], [4, 0.44342084787032643], [5, 0.47000117105182837], [6, 0.47349680024454244], [7, 0.492707617324494], [8, 0.5089780432557826], [9, 0.5381495705431261], [10, 0.5502294572147296], [11, 0.5684466241044865], [12, 0.5939813082362779], [13, 0.6368959172575426]]
const scores_11 = [0.437, 0.992];


const sv_12 =  [[1, 0.36273983904533125], [2, 0.398701868965745], [3, 0.42914833231219585], [4, 0.4469484733633373], [5, 0.4707145266503385], [6, 0.47189404127156787], [7, 0.49247273317194296], [8, 0.5060754765388054], [9, 0.5388221550873612], [10, 0.5442481633119963], [11, 0.5724299648709847], [12, 0.5968392009280707], [13, 0.6223958785064145]]
const scores_12 = [0.457, 0.989];





        const w = 300;


        const h = 300;

        const makeplot = (name, ds, scores) => {
            var svg = d3.select("#ncmap_"+String(name)+"_plot")
            .append("svg")
            .attr("width", w)
            .attr("height", h);

            svg.append("text")
            .attr("x",20)
            .attr("y",25)
            .text("Polsby-Popper: " + String(scores[0]))

            svg.append("text")
            .attr("x",20)
            .attr("y",50)
            .text("Partisan Symmetry: " + String(scores[1]))
            


            svg.append("line")
            .attr("x1",0)
            .attr("y1",0)
            .attr("x2",0)
            .attr("y2",h)
            .style("stroke-width",3)
            .style("stroke","#999999");
            svg.append("line")
            .attr("x1",0)
            .attr("y1",h)
            .attr("x2",w)
            .attr("y2",h)
            .style("stroke-width",3)
            .style("stroke","#999999");




            var circs = svg.selectAll("circle")
            .data(ds)
            .enter();

            circs.append("circle")

            .attr("cx", function(d) {
                return d[0]*w/15;
            })
            .attr("cy", function(d) {
                return h-(d[1]*h);
            })
            .attr("r", 8)
            .style("fill",function(d) {  return getColorForPercentage( ncplancolors[parseInt(name)][d[0]-1] )})


            circs.append("circle")
            .attr("cx" ,function(d) {return w - ((d[0]+1)*w/15) }  )
            .attr("cy", function(d) { return d[1]*h })
            .attr("r",3)
            .style("fill","#323232");


        }


        [['0', sv_0, scores_0], ['1', sv_1, scores_1], ['2', sv_2, scores_2], ['3', sv_3, scores_3], ['4', sv_4, scores_4], ['5', sv_5, scores_5], ['6', sv_6, scores_6], ['7', sv_7, scores_7], ['8', sv_8, scores_8], ['9', sv_9, scores_9], ['10', sv_10, scores_10], ['11', sv_11, scores_11], ['12', sv_12, scores_12]].forEach(x => makeplot(x[0],x[1],x[2])) 
