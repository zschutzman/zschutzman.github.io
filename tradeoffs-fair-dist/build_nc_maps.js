        var percentColors = [
        { pct: 0.0, color: { r: 0xff, g: 0x00, b: 0 } },
        { pct: 0.5, color: { r: 0xcc, g: 0xcc, b: 0xcc } },
        { pct: 1.0, color: { r: 0x00, g: 0, b: 0xff } } ];

        var getColorForPercentage = function(pct) {
            for (var i = 1; i < percentColors.length - 1; i++) {
                if (pct < percentColors[i].pct) {
                    break;
                }
            }
            var lower = percentColors[i - 1];
            var upper = percentColors[i];
            var range = upper.pct - lower.pct;
            var rangePct = (pct - lower.pct) / range;
            var pctLower = 1 - rangePct;
            var pctUpper = rangePct;
            var color = {
                r: Math.floor(lower.color.r * pctLower + upper.color.r * pctUpper),
                g: Math.floor(lower.color.g * pctLower + upper.color.g * pctUpper),
                b: Math.floor(lower.color.b * pctLower + upper.color.b * pctUpper)
            };
            return 'rgb(' + [color.r, color.g, color.b].join(',') + ')';
    // or output as hex if preferred
}  


var colordict = {'0': 'rgba(31,119,180,1.0)',
'1': 'rgba(174,199,232,1.0)',
'2': 'rgba(255,127,14,1.0)',
'3': 'rgba(255,187,120,1.0)',
'4': 'rgba(44,160,44,1.0)',
'5': 'rgba(152,223,138,1.0)',
'6': 'rgba(214,39,40,1.0)',
'7': 'rgba(255,152,150,1.0)',
'8': 'rgba(148,103,189,1.0)',
'9': 'rgba(197,176,213,1.0)',
'10': 'rgba(140,86,75,1.0)',
'11': 'rgba(196,156,148,1.0)',
'12': 'rgba(227,119,194,1.0)',
'13': 'rgba(247,182,210,1.0)',
'14': 'rgba(127,127,127,1.0)',
'15': 'rgba(199,199,199,1.0)',
'16': 'rgba(188,189,34,1.0)',
'17': 'rgba(219,219,141,1.0)'}

var ncplancolors = [];
var plancolor = []
function colorplan(feature) {


            plancolor.push(parseInt(feature.properties["EL14G_US_1"])/(parseInt(feature.properties["EL14G_US_1"]) + parseInt(feature.properties["EL14G_USS_"])));
            return {
                //pane: 'pane_PA_VTD_PLANS_0',
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.75, 
                fill: true,
                fillOpacity: 1,
                fillColor: getColorForPercentage(parseInt(feature.properties["EL14G_US_1"])/(parseInt(feature.properties["EL14G_US_1"]) + parseInt(feature.properties["EL14G_USS_"]))),
                //colordict[String(feature.properties["assn"])],
            };
        }


        const makemap = (bindto,varname) =>  {
            plancolor = [];
            var map = new L.map(bindto, {
                maxZoom:10, minZoom:4, attributionControl: false,
            }).fitBounds([[31.7,-85],[37,-74]]);

            var layer =  L.geoJson(varname, {
                style: colorplan,
            }).addTo(map);

            
            
            ncplancolors.push(plancolor.slice(0).sort())
            return layer;
        }

        [['ncmap0',vtds_0],['ncmap1',vtds_1],['ncmap2',vtds_2],['ncmap3',vtds_3],['ncmap4',vtds_4],['ncmap5',vtds_5],['ncmap6',vtds_6],['ncmap7',vtds_7],['ncmap8',vtds_8],['ncmap9',vtds_9],['ncmap10',vtds_10],['ncmap11',vtds_11],['ncmap12',vtds_12]].forEach(x => makemap(x[0],x[1]))


const sv_0 =  [[1, 0.3433962009193372], [2, 0.43045852791563544], [3, 0.45312964504498443], [4, 0.47451622912046754], [5, 0.47923260117264455], [6, 0.49193270080192975], [7, 0.5004709210698579], [8, 0.5083722537467813], [9, 0.521866970197518], [10, 0.5254826142561222], [11, 0.5468518333229111], [12, 0.5698748758960028], [13, 0.6573497760315812]]
const scores_0 = [0.322, 1.0];


const sv_1 =  [[1, 0.3662418708426942], [2, 0.3752361105227825], [3, 0.4526845797896264], [4, 0.4572175366489837], [5, 0.4731284818141456], [6, 0.4848780559020405], [7, 0.5006921836607143], [8, 0.5158629939904764], [9, 0.5263203794984412], [10, 0.5428676980402335], [11, 0.5473839213022478], [12, 0.624562162741573], [13, 0.6345599203058003]]
const scores_1 = [0.384, 1.0];


const sv_2 =  [[1, 0.3553472481131581], [2, 0.3723541043315407], [3, 0.43660179194024684], [4, 0.4599552128722917], [5, 0.48014908236251186], [6, 0.4842102739528755], [7, 0.5002065499854829], [8, 0.5153616971127793], [9, 0.524778933628599], [10, 0.5400587006585963], [11, 0.5634271018787799], [12, 0.6365452765943136], [13, 0.6438334578097318]]
const scores_2 = [0.391, 0.998];


const sv_3 =  [[1, 0.36464196355633205], [2, 0.41674351462643744], [3, 0.4429701343772804], [4, 0.4470982476860532], [5, 0.4737575441304286], [6, 0.47954435877325363], [7, 0.501742372874316], [8, 0.5211081002665915], [9, 0.5260008032083388], [10, 0.550229511739946], [11, 0.5588840207191281], [12, 0.5841172175950522], [13, 0.6441125985587011]]
const scores_3 = [0.397, 0.997];


const sv_4 =  [[1, 0.3396039735680819], [2, 0.37711946843701605], [3, 0.3933310516916022], [4, 0.44379722193656146], [5, 0.4708204896878122], [6, 0.4718724933140682], [7, 0.5063846054561596], [8, 0.5283202945154941], [9, 0.5319320061093645], [10, 0.5562549806727397], [11, 0.6145744774536444], [12, 0.6234512383993467], [13, 0.6602356464176895]]
const scores_4 = [0.4, 0.997];


const sv_5 =  [[1, 0.3695794212270247], [2, 0.4100052888168776], [3, 0.4444433386065638], [4, 0.44808575155486563], [5, 0.4725075249964965], [6, 0.48698033065762036], [7, 0.5009022725958855], [8, 0.5183978840524287], [9, 0.5266200981553785], [10, 0.5515939263045035], [11, 0.5546468468249214], [12, 0.5922545255928116], [13, 0.6411009080559298]]
const scores_5 = [0.402, 0.997];


const sv_6 =  [[1, 0.35091326216224183], [2, 0.3755885839596612], [3, 0.4429109470715282], [4, 0.45108010626477857], [5, 0.454595769860761], [6, 0.47252500790784646], [7, 0.5175071398337086], [8, 0.5276770748190829], [9, 0.541556909704606], [10, 0.548533235052577], [11, 0.5567192748002482], [12, 0.6337115663336157], [13, 0.6480203412009427]]
const scores_6 = [0.409, 0.995];


const sv_7 =  [[1, 0.35843431079331933], [2, 0.3884935075196133], [3, 0.4460233100090776], [4, 0.4689109074438086], [5, 0.470506955044921], [6, 0.5040165456134336], [7, 0.5048489552421384], [8, 0.5268640357279923], [9, 0.5295097777241016], [10, 0.5322987749081725], [11, 0.5535375325811097], [12, 0.6111047781113301], [13, 0.6415770477904117]]
const scores_7 = [0.41, 0.994];


const sv_8 =  [[1, 0.3723961815252774], [2, 0.39712537891625654], [3, 0.42362257273409654], [4, 0.4602402579548769], [5, 0.47484563123426615], [6, 0.48218217642859584], [7, 0.5001864478171415], [8, 0.5209355366840716], [9, 0.5260008032083388], [10, 0.5399109281335981], [11, 0.5759086206219199], [12, 0.6256895651353291], [13, 0.6380144813123123]]
const scores_8 = [0.414, 0.994];


const sv_9 =  [[1, 0.36807101724091074], [2, 0.3848547096164999], [3, 0.44973487990641825], [4, 0.4618898418715047], [5, 0.47964551336028527], [6, 0.48298120163313174], [7, 0.501601084928935], [8, 0.5201378972094982], [9, 0.5295097777241016], [10, 0.5513873181602281], [11, 0.5621013616628092], [12, 0.6171144309442944], [13, 0.6322080219390402]]
const scores_9 = [0.428, 0.994];


const sv_10 =  [[1, 0.37485763912684267], [2, 0.3840486736475095], [3, 0.43173778856466505], [4, 0.4647725306320607], [5, 0.46981151625611195], [6, 0.48816286654739294], [7, 0.5112308730779693], [8, 0.5225504698544677], [9, 0.5310591110920619], [10, 0.5511577271198538], [11, 0.5722970763054582], [12, 0.6156503615830489], [13, 0.6249624520025056]]
const scores_10 = [0.431, 0.993];


const sv_11 =  [[1, 0.3631040827424574], [2, 0.4060186917637222], [3, 0.43155337589551346], [4, 0.4497705427852704], [5, 0.46185042945687393], [6, 0.49102195674421745], [7, 0.507292382675506], [8, 0.5265031997554576], [9, 0.5299988289481716], [10, 0.5565791521296736], [11, 0.572499518540643], [12, 0.598802372688831], [13, 0.6379371057887862]]
const scores_11 = [0.437, 0.992];


const sv_12 =  [[1, 0.37760412149358547], [2, 0.40316079907192925], [3, 0.42757003512901526], [4, 0.4557518366880037], [5, 0.4611778449126388], [6, 0.49392452346119464], [7, 0.507527266828057], [8, 0.528105958728432], [9, 0.5292854733496615], [10, 0.5530515266366627], [11, 0.5708516676878042], [12, 0.601298131034255], [13, 0.6372601609546688]]
const scores_12 = [0.457, 0.989];







        const w = 300;


        const h = 300;

        const makeplot = (name, ds, scores) => {
            var svg = d3.select("#ncmap_"+String(name)+"_plot")
            .append("svg")
            .attr("width", w)
            .attr("height", h);

            svg.append("text")
            .attr("x",20)
            .attr("y",25)
            .text("Polsby-Popper: " + String(scores[0]))

            svg.append("text")
            .attr("x",20)
            .attr("y",50)
            .text("Partisan Symmetry: " + String(scores[1]))
            


            svg.append("line")
            .attr("x1",0)
            .attr("y1",0)
            .attr("x2",0)
            .attr("y2",h)
            .style("stroke-width",3)
            .style("stroke","#999999");
            svg.append("line")
            .attr("x1",0)
            .attr("y1",h)
            .attr("x2",w)
            .attr("y2",h)
            .style("stroke-width",3)
            .style("stroke","#999999");




            var circs = svg.selectAll("circle")
            .data(ds)
            .enter();

            circs.append("circle")

            .attr("cx", function(d) {
                return d[0]*w/15;
            })
            .attr("cy", function(d) {
                return h-(d[1]*h);
            })
            .attr("r", 8)
            .style("fill",function(d) {  return getColorForPercentage( ncplancolors[parseInt(name)][d[0]-1] )})


            circs.append("circle")
            .attr("cx" ,function(d) {return w - ((d[0]+1)*w/15) }  )
            .attr("cy", function(d) { return d[1]*h })
            .attr("r",3)
            .style("fill","#323232");


        }


        [['0', sv_0, scores_0], ['1', sv_1, scores_1], ['2', sv_2, scores_2], ['3', sv_3, scores_3], ['4', sv_4, scores_4], ['5', sv_5, scores_5], ['6', sv_6, scores_6], ['7', sv_7, scores_7], ['8', sv_8, scores_8], ['9', sv_9, scores_9], ['10', sv_10, scores_10], ['11', sv_11, scores_11], ['12', sv_12, scores_12]].forEach(x => makeplot(x[0],x[1],x[2])) 
